application:
  web:
    prefix:
      public: /api/order
spring:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:order_db}
    username: ${DB_USERNAME:order_service}
    password: ${DB_PASSWORD:order_service_password}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    producer:
#      bootstrap-servers: ${KAFKA_PRODUCER_BOOTSTRAP_SERVERS:localhost:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
#      bootstrap-servers: ${KAFKA_CONSUMER_BOOTSTRAP_SERVERS:localhost:9092}
      group-id: order-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
kafka:
  topics:
    payment-not-succeed: ${KAFKA_TOPIC_PAYMENT_NOT_SUCCEED:payment-not-succeed}
    payment-succeed: ${KAFKA_TOPIC_PAYMENT_SUCCEED:payment-succeed}
    delivery-not-reserved: ${KAFKA_TOPIC_DELIVERY_NOT_RESERVED:delivery-not-reserved}
    delivery-reserved: ${KAFKA_TOPIC_DELIVERY_RESERVED:delivery-reserved}
    product-not-reserved: ${KAFKA_TOPIC_PRODUCT_NOT_RESERVED:product-not-reserved}
    product-reserved: ${KAFKA_TOPIC_PRODUCT_NOT_RESERVED:product-reserved}
server:
  port: ${SERVER_PORT:8080}
  error:
    whitelabel:
      enabled: false
management:
  endpoints:
    web:
      exposure:
        include: health, prometheus
  metrics:
    distribution:
      slo:
        "[http.server.requests]": 1ms, 5ms, 10ms, 15ms, 25ms, 40ms, 60ms, 100ms, 200ms, 500ms,2s,5s,30s
  prometheus:
    metrics:
      export:
        enabled: true


#logging:
#  level:
#    org.springframework: TRACE
